apply plugin: 'maven-publish'
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
android {
    namespace 'com.baihe.lib_imageloader'
    compileSdk rootProject.android.compileSdk
    defaultConfig {
        minSdkVersion rootProject.android.minSdk
        targetSdkVersion rootProject.android.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）
        exclude 'META-INF/*******'
    }
}

dependencies {
    implementation rootProject.depsLibs.junit
    implementation rootProject.depsLibs.extJunit
    implementation rootProject.depsLibs.espressoCore
    implementation rootProject.depsLibs.glide
    kapt rootProject.depsLibs.glideCompiler
}
task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.getSourceFiles()
    classifier 'sources'
}
afterEvaluate{
    publishing {
        publications {
            mavenAar(MavenPublication) {
                groupId 'com.wedding.crm.lib'
                artifactId 'imageloader'
                version rootProject.dependVersion.imageLoaderLibVersion
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                artifact generateSourcesJar
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if ((it.group != null && "unspecified" != it.group) && (it.name != null && "unspecified" != it.name) && (it.version != null && "unspecified" != it.version)) {
                            println "dependency=${it.toString()}"
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'implementation')

                        }
                    }
                }
            }
        }
        repositories {
            maven {
                allowInsecureProtocol = true
                url 'http://10.240.210.158:8081/repository/jiayuan/'
                credentials {
                    username = 'jiayuandev'
                    password = 'jyandroid'
                }
            }
            mavenLocal()
        }
    }
}

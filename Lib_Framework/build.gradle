apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

android {
    namespace 'com.baihe.lib_framework'
    compileSdk rootProject.android.compileSdk
    buildToolsVersion rootProject.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.android.minSdk
        targetSdkVersion rootProject.android.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        configurations.all{
            resolutionStrategy{force 'org.jetbrains.kotlin:kotlin-stdlib:1.7.10'}
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）
        exclude 'META-INF/*******'
    }
}

dependencies {


    api rootProject.depsLibs.logCore

    api rootProject.depsLibs.junit
    api rootProject.depsLibs.extJunit
    api rootProject.depsLibs.espressoCore
    api rootProject.depsLibs.coreKtx
    api rootProject.depsLibs.appcompat
    api rootProject.depsLibs.material
    api rootProject.depsLibs.liveDataKtx
    api rootProject.depsLibs.viewModelKtx
    api rootProject.depsLibs.lifecycleKtx
    api rootProject.depsLibs.gson
    api rootProject.depsLibs.mmkv

    api rootProject.depsLibs.refreshLayout
    api rootProject.depsLibs.refreshFooter
    api rootProject.depsLibs.tbssdk
    api rootProject.depsLibs.LoadingStateView
    api rootProject.depsLibs.networkLib
    api rootProject.depsLibs.imageLoaderLib



}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

afterEvaluate{
    publishing {
        publications {
            Arr(MavenPublication) {
                groupId 'com.wedding.crm.lib'
                artifactId 'framework'
                version '1.0.0.0-beta-10-SNAPSHOT'
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                artifact generateSourcesJar
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if ((it.group != null && "unspecified" != it.group) && (it.name != null && "unspecified" != it.name) && (it.version != null && "unspecified" != it.version)) {
                            println "dependency=${it.toString()}"
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'implementation')

                        }
                    }
                }

            }


        }
        repositories {
            maven {
                allowInsecureProtocol = true
                url 'http://10.240.210.158:8081/repository/jiayuan/'
                credentials {
                    username = 'jiayuandev'
                    password = 'jyandroid'
                }
            }

            mavenLocal()
        }

    }
}


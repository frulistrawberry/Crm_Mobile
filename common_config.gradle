if (isBuildModule.toBoolean()) {
    //作为独立App应用运行
    apply plugin: 'com.android.application'
} else {
    //作为组件运行
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
android {
    compileSdk rootProject.android.compileSdk
    buildToolsVersion rootProject.android.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.android.minSdk
        targetSdkVersion rootProject.android.targetSdk
        versionCode rootProject.android.versionCode
        versionName rootProject.android.versionName


        //阿里路由框架配置
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
        if (isBuildModule.toBoolean()){
            manifestPlaceholders = [
                    XG_ACCESS_ID : rootProject.sdkConfig.XG_ACCESS_ID,
                    XG_ACCESS_KEY : rootProject.sdkConfig.XG_ACCESS_KEY
            ]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）
        exclude 'META-INF/*******'
    }



    sourceSets {
        main {
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
                java.srcDirs = [
                        'src/main/alone/java',
                        'src/main/java'
                ]
                res.srcDirs = [
                        'src/main/alone/res',
                        'src/main/res'
                ]
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除alone文件夹2下所有调试文件
                    exclude 'src/main/alone/*'
                }
            }
        }
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

}

dependencies {
    implementation rootProject.depsLibs.commonLib
    implementation rootProject.depsLibs.aroutreApi
    kapt rootProject.depsLibs.arouterCompiler
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.getSourceFiles()
    classifier 'sources'
}
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
android {
    compileSdk rootProject.android.compileSdk
    namespace 'com.baihe.lib_common'
    defaultConfig {

        minSdkVersion rootProject.android.minSdk
        targetSdkVersion rootProject.android.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）
        exclude 'META-INF/*******'
    }

}

dependencies {
    implementation rootProject.depsLibs.aroutreApi
    kapt rootProject.depsLibs.arouterCompiler
    implementation rootProject.depsLibs.tps
    implementation rootProject.depsLibs.logHttp
    implementation rootProject.depsLibs.navigationFragment
    implementation rootProject.depsLibs.navigationUI
    implementation rootProject.depsLibs.frameworkLib

}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.getSourceFiles()
    classifier 'sources'
}
afterEvaluate{
    publishing {
        publications {
            Arr(MavenPublication) {
                groupId 'com.wedding.crm.lib'
                artifactId 'common'
                version '1.0.0.0-SNAPSHOT'
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                artifact generateSourcesJar
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                            println "dependency=${it.toString()}"
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'implementation')

                        }
                    }
                }

            }


        }
        repositories {
            maven {
                allowInsecureProtocol = true
                url 'http://10.240.210.158:8081/repository/jiayuan/'
                credentials {
                    username = 'jiayuandev'
                    password = 'jyandroid'
                }
            }

            mavenLocal()
        }
    }
}
